// <auto-generated />
using System;
using AllCore.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AllCore.Migrations
{
    [DbContext(typeof(XContext))]
    [Migration("20180824091508_v1.0.1")]
    partial class v101
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AllCore.Models.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("End")
                        .HasColumnName("end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Start")
                        .HasColumnName("start");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("activity");
                });

            modelBuilder.Entity("AllCore.Models.ActivityItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("ActivityId")
                        .HasColumnName("activity_id");

                    b.Property<long>("GoodsId")
                        .HasColumnName("goods_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("GoodsId")
                        .IsUnique();

                    b.ToTable("activity_item");
                });

            modelBuilder.Entity("AllCore.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("GoodsId")
                        .HasColumnName("goods_id");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("MemberId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("AllCore.Models.Catalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("catalog");
                });

            modelBuilder.Entity("AllCore.Models.Goods", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long?>("ActivityItemId")
                        .HasColumnName("activity_item_id");

                    b.Property<long>("CatalogId")
                        .HasColumnName("catalog_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("goods");
                });

            modelBuilder.Entity("AllCore.Models.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("member");
                });

            modelBuilder.Entity("AllCore.Models.ActivityItem", b =>
                {
                    b.HasOne("AllCore.Models.Activity", "Activity")
                        .WithMany("Items")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AllCore.Models.Goods", "Goods")
                        .WithOne("ActivityItem")
                        .HasForeignKey("AllCore.Models.ActivityItem", "GoodsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AllCore.Models.Cart", b =>
                {
                    b.HasOne("AllCore.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AllCore.Models.Member", "Member")
                        .WithMany("Carts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllCore.Models.Goods", b =>
                {
                    b.HasOne("AllCore.Models.Catalog", "Catalog")
                        .WithMany("Goods")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
